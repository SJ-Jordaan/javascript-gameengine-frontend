(()=>{"use strict";class t extends PIXI.Sprite{constructor(t){super(t),this.interactive=!0,this.buttonMode=!0,this.on("pointerdown",this.onDragStart).on("pointerup",this.onDragEnd).on("pointerupoutside",this.onDragEnd).on("pointermove",this.onDragMove),this.onDragStart=this.onDragStart.bind(this),this.onDragEnd=this.onDragEnd.bind(this),this.onDragMove=this.onDragMove.bind(this)}onDragStart(t){this.data=t.data,this.alpha=.5,this.dragging=!0,this.offX=this.x-this.data.getLocalPosition(this.parent).x,this.offY=this.y-this.data.getLocalPosition(this.parent).y}onDragEnd(){this.alpha=1,this.dragging=!1,this.data=null}onDragMove(){if(this.dragging){const t=this.data.getLocalPosition(this.parent);this.x=t.x+this.offX,this.y=t.y+this.offY}}}class e{constructor(t,e){this.x=t,this.y=e,this.distanceTo=this.distanceTo.bind(this)}distanceTo(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))}}class s extends t{constructor(t,s=0,i=0){super(t),this.setTransform(s,i),this.anchor.set(.5),this.on("pointermove",this.onDragMove),this.vertexPoints={topLeft:new e(this.x,this.y),topRight:new e(this.x+this.getBounds().width,this.y),bottomLeft:new e(this.x,this.y+this.getBounds().height),bottomRight:new e(this.x+this.getBounds().width,this.y+this.getBounds().height)},this.updateVertexPoints=this.updateVertexPoints.bind(this),this.snapToEdge=this.snapToEdge.bind(this),this.snapToVertex=this.snapToVertex.bind(this),this.onDragMove=this.onDragMove.bind(this)}updateVertexPoints(){this.vertexPoints={topLeft:new e(this.x,this.y),topRight:new e(this.x+this.getBounds().width,this.y),bottomLeft:new e(this.x,this.y+this.getBounds().height),bottomRight:new e(this.x+this.getBounds().width,this.y+this.getBounds().height)}}snapToEdge(t){!0===this.parent.edgeSnap&&this.parent.children.filter((t=>t.x!==this.x&&t.y!==this.y)).forEach((e=>{e instanceof s&&(Math.abs(this.getBounds().top-e.getBounds().bottom)<t&&this.x<=e.getBounds().right&&this.x>=e.getBounds().left?(this.x=e.x,this.y=e.y+e.getBounds().height):Math.abs(this.getBounds().bottom-e.getBounds().top)<t&&this.x<=e.getBounds().right&&this.x>=e.getBounds().left?(this.x=e.x,this.y+=Math.abs(this.getBounds().bottom-e.getBounds().top)):Math.abs(this.getBounds().right-e.getBounds().left)<t&&this.y<=e.getBounds().bottom&&this.y>=e.getBounds().top?(this.y=e.y,this.x+=Math.abs(this.getBounds().right-e.getBounds().left)):Math.abs(this.getBounds().left-e.getBounds().right)<t&&this.y<=e.getBounds().bottom&&this.y>=e.getBounds().top&&(this.y=e.y,this.x=e.x+e.getBounds().width))}))}snapToVertex(t){!0===this.parent.vertexSnap&&this.parent.children.filter((t=>t.x!==this.x&&t.y!==this.y)).forEach((e=>{e instanceof s&&(this.vertexPoints.topLeft.distanceTo(e.vertexPoints.bottomRight)<=t?(this.x=e.x+e.getBounds().width,this.y=e.y+e.getBounds().height):this.vertexPoints.topRight.distanceTo(e.vertexPoints.bottomLeft)<=t?(this.x=e.x-this.getBounds().width,this.y=e.y+this.getBounds().height):this.vertexPoints.bottomRight.distanceTo(e.vertexPoints.topLeft)<=t?(this.x=e.x-this.getBounds().width,this.y=e.y-this.getBounds().height):this.vertexPoints.bottomLeft.distanceTo(e.vertexPoints.topRight)<=t&&(this.x=e.x+e.getBounds().width,this.y=e.y-this.getBounds().height))}))}onDragMove(){if(this.dragging){const t=this.data.getLocalPosition(this.parent);this.x=t.x+this.offX,this.y=t.y+this.offY,this.updateVertexPoints(),this.snapToEdge(this.parent.snapDistance),this.snapToVertex(this.parent.snapDistance)}}}class i extends PIXI.Container{constructor(t){super(),this.name=t,this.edgeSnap=!0,this.vertexSnap=!0,this.snapDistance=20,this.enableVertexSnap=this.enableVertexSnap.bind(this),this.disableVertexSnap=this.disableVertexSnap.bind(this),this.enableEdgeSnap=this.enableEdgeSnap.bind(this),this.disableEdgeSnap=this.disableEdgeSnap.bind(this)}enableEdgeSnap(){this.edgeSnap=!0}disableEdgeSnap(){this.edgeSnap=!1}enableVertexSnap(){this.vertexSnap=!0}disableVertexSnap(){this.vertexSnap=!1}}class h{constructor(t){this.name=t,this.TextureCache=PIXI.utils.TextureCache,this.scenes=[],this.currentSceneIndex=0,this.addBackground=this.addBackground.bind(this),this.play=this.play.bind(this),this.render=this.render.bind(this),this.init=this.init.bind(this),this.stop=this.stop.bind(this),this.update=this.update.bind(this)}init(){let t=new i("gameScene");t.visible=!0,this.scenes.push(t)}addBackground(e){if(null!=e){let s=new t(e);this.scenes[this.currentSceneIndex].addChild(s)}}play(){}stop(){}update(){}render(){this.addBackground(this.TextureCache.background);let t=new s(this.TextureCache.greenTile);t.x=20,t.y=20,this.scenes[0].addChild(t);let e=new s(this.TextureCache.brownTile);e.x=80,e.y=80,this.scenes[0].addChild(e);let i=new s(this.TextureCache.blueTile);i.x=120,i.y=120,this.scenes[0].addChild(i);let h=new s(this.TextureCache.orangeTile);h.x=240,h.y=240,this.scenes[0].addChild(h);let n=new s(this.TextureCache.redTile);n.x=320,n.y=320,this.scenes[0].addChild(n);let a=new s(this.TextureCache.yellowTile);a.x=400,a.y=400,this.scenes[0].addChild(a);let o=new s(this.TextureCache["/public/assets/images/yellowTile.png"]);o.x=500,o.y=500,this.scenes[0].addChild(o)}}const n={designing:"Designing",playing:"Playing",paused:"Paused"};Object.freeze(n),(new class{constructor(t=900,e=600){this.app=new PIXI.Application({width:t,height:e,backgroundColor:11184810,resolution:window.devicePixelRatio||1,autoResize:!0}),this.currentGameIndex=0,this.games=[],this.currentMode=n.designing,this.init=this.init.bind(this),this.loadTexturesFromLocal=this.loadTexturesFromLocal.bind(this),this.renderGame=this.renderGame.bind(this),this.createGame=this.createGame.bind(this),this.loadDefaultAssets=this.loadDefaultAssets.bind(this)}init(){document.getElementById("engine-view").appendChild(this.app.view),document.querySelector("#upload-button").addEventListener("change",this.loadTexturesFromLocal,!1),this.app.loader.baseUrl="/public/assets/",this.loadDefaultAssets(),this.createGame("Test Game"),this.games[this.currentGameIndex].scenes.forEach((t=>{this.app.stage.addChild(t)}))}loadDefaultAssets(){this.app.loader.add("blueTile","images/blueTile.png").add("brownTile","images/brownTile.png").add("blackTile","images/blackTile.png").add("greenTile","images/greenTile.png").add("yellowTile","images/yellowTile.png").add("redTile","images/redTile.png").add("whiteTile","images/whiteTile.png").add("orangeTile","images/orangeTile.png").add("background","images/background.jpg"),this.app.loader.onComplete.add(this.renderGame),this.app.loader.load()}loadTexturesFromLocal(t){let e=t.target,s=e.files;for(let t=0;t<s.length;t++){let s=new FileReader;s.onload=function(){const i=new Image;i.src=s.result;let h=new PIXI.BaseTexture(i.src);PIXI.Texture.addToCache(h,e.files[t].name)},s.readAsDataURL(e.files[t])}}renderGame(){this.games[this.currentGameIndex].render()}createGame(t){let e=new h(t);e.init(),this.games.push(e)}deleteGame(t){}saveGame(){}play(){this.currentMode=n.playing}}).init()})();